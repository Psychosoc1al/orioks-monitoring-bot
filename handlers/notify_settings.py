import logging

from aiogram import types

from answers import settings

logger = logging.getLogger(__name__)

notify_settings_names_to_vars = {
    'marks': '–û—Ü–µ–Ω–∫–∏',
    'news': '–ù–æ–≤–æ—Å—Ç–∏',
    'discipline_sources': '–†–µ—Å—É—Ä—Å—ã',
    'homeworks': '–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
    'requests': '–ó–∞—è–≤–∫–∏',
}


def _get_section_name_with_status(section_name: str, is_on_off: dict) -> str:
    emoji = 'üîî' if is_on_off[section_name] else '‚ùå'
    return f'{emoji} {notify_settings_names_to_vars[section_name]}'


def init_notify_settings_inline_btns(is_on_off: dict) -> types.InlineKeyboardMarkup:
    """
    is_on_off = {
        '–û–±—É—á–µ–Ω–∏–µ': False,
        '–ù–æ–≤–æ—Å—Ç–∏': False,
        '–†–µ—Å—É—Ä—Å—ã': False,
        '–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è': False,
        '–ó–∞—è–≤–∫–∏': False,
    }
    """
    inline_kb_full: types.InlineKeyboardMarkup = types.InlineKeyboardMarkup(row_width=1)
    inline_kb_full.add(
        types.InlineKeyboardButton(_get_section_name_with_status('marks', is_on_off),
                                   callback_data='notify_settings-marks'),
        types.InlineKeyboardButton(_get_section_name_with_status('news', is_on_off),
                                   callback_data='notify_settings-news'),
        types.InlineKeyboardButton(_get_section_name_with_status('discipline_sources', is_on_off),
                                   callback_data='notify_settings-discipline_sources'),
        types.InlineKeyboardButton(_get_section_name_with_status('homeworks', is_on_off),
                                   callback_data='notify_settings-homeworks'),
        types.InlineKeyboardButton(_get_section_name_with_status('requests', is_on_off),
                                   callback_data='notify_settings-requests')
    )
    return inline_kb_full


async def user_settings(message: types.Message):
    await settings.send_user_settings(user_id=message.from_user.id)
