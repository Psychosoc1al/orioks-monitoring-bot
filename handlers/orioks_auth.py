import logging
import os

import aiogram.utils.markdown as md
from aiogram import types
from aiogram.dispatcher import FSMContext

import config
import db
import keyboards
import utils.exeptions
import utils.orioks
from answers import menu
from forms import Form
from main import bot

logger = logging.getLogger(__name__)


async def cmd_start(message: types.Message):
    """
    @dp.message_handler(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    @dp.message_handler(commands='login')
    """
    if db.get_user_orioks_authenticated_status(user_telegram_id=message.from_user.id):
        return await message.reply(
            md.text(
                md.bold('–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞ –û–†–ò–û–ö–°'),
                md.text(),
                md.text('–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –û–†–ò–û–ö–°: /logout'),
                sep='\n',
            )
        )
    await Form.login.set()
    await bot.send_message(
        message.chat.id,
        md.text(
            md.text('–Ø –±–µ—Å–ø–æ–∫–æ—é—Å—å, —á—Ç–æ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã.'),
            md.text('–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', md.bold('/cancel')),
        ),
    )
    await message.reply(
        md.text(
            md.bold('üîí –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ä–∏–æ–∫—Å'),
        ),
        reply_markup=types.ReplyKeyboardRemove()
    )


async def cancel_handler(message: types.Message, state: FSMContext):
    """
    @dp.message_handler(state='*', commands='cancel')
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await message.reply(
        md.text(
            md.bold('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'),
            md.text('–ï—Å–ª–∏ –±–æ–∏—à—å—Å—è –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å <faq #why is it secure url>'),
            sep='\n',
        ),
        reply_markup=keyboards.main_menu_keyboard(first_btn_text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'),
    )


async def process_login_invalid(message: types.Message):
    """
    @dp.message_handler(lambda message: not message.text.isdigit(), state=Form.login)
    """
    return await message.reply(
        md.text(
            md.text('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä'),
            md.text('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)'),
            sep='\n'
        ),
    )


async def process_login(message: types.Message, state: FSMContext):
    """
    @dp.message_handler(state=Form.login)
    """
    async with state.proxy() as data:
        data['login'] = int(message.text)

    await Form.next()
    await message.reply(
        md.text(
            md.bold('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ä–∏–æ–∫—Å'),
            md.text(),
            md.text(
                md.italic('üîí –ü–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'),
                md.italic('–û–Ω –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'),
                md.italic('–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: <faq #why is it secure url>'),
                sep='. '
            ),
            sep='\n',
        ),
    )


async def process_password(message: types.Message, state: FSMContext):
    """
    @dp.message_handler(state=Form.password)
    """
    db.update_inc_user_orioks_attempts(user_telegram_id=message.from_user.id)
    if db.get_user_orioks_attempts(user_telegram_id=message.from_user.id) > 10:  # todo: to config
        return await message.reply(
            md.text(
                md.bold('–û—à–∏–±–∫–∞!'),
                md.text('–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–æ—Ç–∞: <support url>'),
                sep='\n',
            )
        )
    await Form.next()
    await state.update_data(password=message.text)
    async with state.proxy() as data:
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–õ–æ–≥–∏–Ω:', md.bold(data['login'])),
                md.text('–ü–∞—Ä–æ–ª—å:', md.code(data['password'])),
                sep='\n',
            ),
        )
    await bot.delete_message(message.chat.id, message.message_id)
    await state.finish()
    sticker_message = await bot.send_sticker(
        message.chat.id,
        "CAACAgIAAxkBAAEEIlpiLSwO28zurkSJGRj6J9SLBIAHYQACIwADKA9qFCdRJeeMIKQGIwQ",  # todo: to config
    )
    try:
        await utils.orioks.orioks_login_save_cookies(user_login=data['login'],
                                                     user_password=data['password'],
                                                     user_telegram_id=message.from_user.id)
        db.update_user_orioks_authenticated_status(
            user_telegram_id=message.from_user.id,
            is_user_orioks_authenticated=True
        )
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!')
            )
        )
    except utils.exeptions.OrioksInvalidLoginCredsError:
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –û–†–ò–û–ö–°!')
            )
        )
    await bot.delete_message(sticker_message.chat.id, sticker_message.message_id)
    await menu.menu_command(chat_id=message.chat.id, user_id=message.from_user.id)


async def orioks_logout(message: types.Message):
    # todo: delete cookies
    await message.reply(
        md.text(
            md.bold('–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –û–†–ò–û–ö–° –≤—ã–ø–æ–ª–Ω–µ–Ω'),
            md.text('–¢–µ–ø–µ—Ä—å –í—ã –ù–ï –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ë–æ—Ç–∞'),
            sep='\n',
        ),
        reply_markup=keyboards.main_menu_keyboard(first_btn_text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'),
    )
    db.update_user_orioks_authenticated_status(
        user_telegram_id=message.from_user.id,
        is_user_orioks_authenticated=False
    )
    try:
        os.remove(os.path.join(config.BASEDIR, 'users_data', 'cookies', f'{message.from_user.id}.pkl'))
    except FileNotFoundError:
        pass  # todo: to logger
