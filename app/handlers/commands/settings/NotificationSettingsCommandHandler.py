from aiogram import types
from aiogram.utils import markdown

import app
from app.handlers import AbstractCommandHandler
from app.helpers import UserHelper
from app.models.users import UserNotifySettings


class NotificationSettingsCommandHandler(AbstractCommandHandler):

    notify_settings_names_to_vars = {
        'marks': '–û—Ü–µ–Ω–∫–∏',
        'news': '–ù–æ–≤–æ—Å—Ç–∏',
        'discipline_sources': '–†–µ—Å—É—Ä—Å—ã',
        'homeworks': '–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
        'requests': '–ó–∞—è–≤–∫–∏',
    }

    @staticmethod
    def _get_section_name_with_status(attribute_name: str, is_on_off: UserNotifySettings) -> str:
        emoji = 'üîî' if getattr(is_on_off, attribute_name) else '‚ùå'
        return f'{emoji} {NotificationSettingsCommandHandler.notify_settings_names_to_vars[attribute_name]}'

    @staticmethod
    def init_notify_settings_inline_btns(is_on_off: dict) -> types.InlineKeyboardMarkup:
        """
        is_on_off = {
            '–û–±—É—á–µ–Ω–∏–µ': False,
            '–ù–æ–≤–æ—Å—Ç–∏': False,
            '–†–µ—Å—É—Ä—Å—ã': False,
            '–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è': False,
            '–ó–∞—è–≤–∫–∏': False,
        }
        """
        inline_kb_full: types.InlineKeyboardMarkup = types.InlineKeyboardMarkup(row_width=1)
        inline_kb_full.add(
            types.InlineKeyboardButton(
                NotificationSettingsCommandHandler._get_section_name_with_status('marks', is_on_off),
                callback_data='notify_settings-marks'
            ),
            types.InlineKeyboardButton(
                NotificationSettingsCommandHandler._get_section_name_with_status('news', is_on_off),
                callback_data='notify_settings-news'
            ),
            types.InlineKeyboardButton(
                NotificationSettingsCommandHandler._get_section_name_with_status('discipline_sources', is_on_off),
                callback_data='notify_settings-discipline_sources'
            ),
            types.InlineKeyboardButton(
                NotificationSettingsCommandHandler._get_section_name_with_status('homeworks', is_on_off),
                callback_data='notify_settings-homeworks'
            ),
            types.InlineKeyboardButton(
                NotificationSettingsCommandHandler._get_section_name_with_status('requests', is_on_off),
                callback_data='notify_settings-requests'
            )
        )
        return inline_kb_full

    @staticmethod
    async def process(message: types.Message, *args, **kwargs):
        await NotificationSettingsCommandHandler.send_user_settings(message.from_user.id, callback_query=None)

    @staticmethod
    async def send_user_settings(user_id: int, callback_query: types.CallbackQuery = None) -> types.Message:
        is_on_off_dict = UserHelper.get_user_settings_by_telegram_id(user_telegram_id=user_id)
        text = markdown.text(
            markdown.text(
                markdown.text('üìì'),
                markdown.text(
                    markdown.hbold('‚Äú–û–±—É—á–µ–Ω–∏–µ‚Äù'),
                    markdown.text('–∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ (–ù–ë–°)'),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üì∞'),
                markdown.text(
                    markdown.hbold('‚Äú–ù–æ–≤–æ—Å—Ç–∏‚Äù'),
                    markdown.text('–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n(–Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º', markdown.hitalic('(coming soon))')),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üìÅ'),
                markdown.text(
                    markdown.hbold('‚Äú–†–µ—Å—É—Ä—Å—ã‚Äù'),
                    markdown.text('–∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ', markdown.hitalic('(coming soon)')),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üìù'),
                markdown.text(
                    markdown.hbold('‚Äú–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è‚Äù'),
                    markdown.text('–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç'),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üìÑ'),
                markdown.text(
                    markdown.hbold('‚Äú–ó–∞—è–≤–∫–∏‚Äù'),
                    markdown.text('–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—Ö–æ–¥–Ω–æ–π –ª–∏—Å—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å, '
                                  '—Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é, –∫–æ–ø–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–ø—Ä–∞–≤–∫–∏'),
                    sep=': ',
                ),
                sep=' ',
            ),
            sep='\n\n',
        )
        if not callback_query:
            return await app.bot.send_message(
                user_id,
                text=text,
                reply_markup=NotificationSettingsCommandHandler.init_notify_settings_inline_btns(
                    is_on_off=is_on_off_dict
                ),
            )
        return await callback_query.message.edit_text(
            text=text,
            reply_markup=NotificationSettingsCommandHandler.init_notify_settings_inline_btns(
                is_on_off=is_on_off_dict
            ),
        )
